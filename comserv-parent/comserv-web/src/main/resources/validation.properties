# The ESAPI validator does many security checks on input, such as canonicalization
# and whitelist validation. Note that all of these validation rules are applied *after*
# canonicalization. Double-encoded characters (even with different encodings involved,
# are never allowed.
#
# To use:
#
# First set up a pattern below. You can choose any name you want, prefixed by the word
# "Validation." For example:
#   Validation.Email=^[A-Za-z0-9._%-]+@[A-Za-z0-9.-]+\\.[a-zA-Z]{2,4}$
# 
# Then you can validate in your code against the pattern like this:
#     ESAPI.validator().isValidInput("User Email", input, "Email", maxLength, allowNull);
# Where maxLength and allowNull are set for you needs, respectively.
#
# But note, when you use boolean variants of validation functions, you lose critical 
# canonicalization. It is preferable to use the "get" methods (which throw exceptions) and 
# and use the returned user input which is in canonical form. Consider the following:
#  
# try {
#    someObject.setEmail(ESAPI.validator().getValidInput("User Email", input, "Email", maxLength, allowNull));
#
Validator.SafeNameString=(?m)^[\\w\\s_\\.\\-,@+\\(\\)!/:#>'& \u2264-\u2265 \u00C0-\u0178\u0400-\u04FF]{0,50}$
Validator.SafeMseString=(?m)^[\\w\\s_\\.\\-,@+\\(\\)!/:>='$& \u2264-\u2265 \u00C0-\u0178\u0400-\u04FF]{0,2048}$
Validator.SafeProfileString=(?m)^[\\w\\s_\\.\\-,@+\\=(\\)!/:#{\\}>'&\u007C\u00C0-\u0178\u0400-\u04FF]{0,2048}$
Validator.SafeString=(?m)^[\\w\\s_\\.\\-,@+\\=(\\)!/:#>'&\u007C\u00C0-\u0178\u0400-\u04FF]{0,2048}$
Validator.Passphrase=^[\\w\\.\\-\\?,@!#$%^&*+=\u00C0-\u0178]{0,128}$
Validator.SafeHTML=(?m)^[\\w\\s\\.\\-,@+\\(\\)=<>'/?!\":\u00C0-\u0178\u0400-\u04FF]{0,2048}$
Validator.ExcludeString=(?ism)^(?!.*script).*$